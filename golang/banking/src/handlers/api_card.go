/*
 * Swagger banking api simulation - OpenAPI 3.0
 *
 * Banking simulation application
 *
 * API version: 1.0.11
 * Contact: apiteam@swagger.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package handlers

import (
	"errors"
	"net/http"

	"github.com/dopefresh/banking/golang/banking/src/models"
	"github.com/dopefresh/banking/golang/banking/src/services"
	"github.com/gin-gonic/gin"
	"go.uber.org/zap"
	"gorm.io/gorm"
)

type CardHandler struct {
	CardService           services.CardService
	cardPermissionService services.CardPermissionService
	Log                   *zap.Logger
}

// AddCard - Add a new card
func (handler CardHandler) AddCard(c *gin.Context) {
	userIdRaw, _ := c.Get("userId")
	userId, _ := userIdRaw.(int64)

	var card models.Card
	err := c.Bind(&card)
	if err != nil {
		handler.Log.Error("Error binding request data to models.Card", zap.Error(err))
		c.JSON(http.StatusBadRequest, "Validation Exception")
	}
	err = handler.CardService.CreateCard(userId, card)
	if err != nil {
		handler.Log.Error("Error when creating card", zap.Error(err))
		c.JSON(http.StatusBadRequest, "Invalid transaction")
	}
	c.JSON(http.StatusCreated, gin.H{})
}

// GetCard - get card by number
func (handler CardHandler) GetCard(c *gin.Context) {
	userIdRaw, _ := c.Get("userId")
	userId, _ := userIdRaw.(int64)
	cardNumber := c.Param("number")

	canUse := handler.cardPermissionService.CheckCanUseCard(cardNumber, userId)
	if !canUse {
		c.JSON(http.StatusUnauthorized, "this card isn't your's!")
		return
	}

	card, err := handler.CardService.GetCardByNumber(cardNumber)

	if err != nil {
		handler.Log.Error("Error when getting card", zap.Error(err))
		if errors.Is(err, gorm.ErrRecordNotFound) {
			c.JSON(http.StatusNotFound, "Card not found")
		}
		c.JSON(http.StatusInternalServerError, "Some error")
	}

	c.JSON(http.StatusOK, card)
}

// UpdateCard - Update an existing card
func (handler CardHandler) UpdateCard(c *gin.Context) {
	var card models.CardUpdate
	err := c.Bind(&card)
	if err != nil {
		handler.Log.Error("Error binding request data to models.CardUpdate", zap.Error(err))
		c.JSON(http.StatusBadRequest, "Validation Exception")
	}

	userIdRaw, _ := c.Get("userId")
	userId, _ := userIdRaw.(int64)
	cardNumber := c.Param("number")

	canUse := handler.cardPermissionService.CheckCanUseCard(cardNumber, userId)
	if !canUse {
		c.JSON(http.StatusUnauthorized, "this card isn't yours!")
		return
	}

	err = handler.CardService.UpdateCard(cardNumber, card)

	if err != nil {
		handler.Log.Error("Error when updating card", zap.Error(err))

		if errors.Is(err, gorm.ErrRecordNotFound) {
			c.JSON(http.StatusNotFound, "Card not found")
		}
		c.JSON(http.StatusInternalServerError, "Some error")
	}
	c.JSON(http.StatusOK, gin.H{})
}

// DeleteCard - delete card by number
func (handler CardHandler) DeleteCard(c *gin.Context) {
	userIdRaw, _ := c.Get("userId")
	userId, _ := userIdRaw.(int64)
	cardNumber := c.Param("number")

	canUse := handler.cardPermissionService.CheckCanUseCard(cardNumber, userId)
	if !canUse {
		c.JSON(http.StatusUnauthorized, "this card isn't yours!")
		return
	}

	err := handler.CardService.DeleteCard(cardNumber)

	if err != nil {
		handler.Log.Error("Error when deleting card", zap.Error(err))
		if errors.Is(err, gorm.ErrRecordNotFound) {
			c.JSON(http.StatusNotFound, "Card didn't exist")
		}
		c.JSON(http.StatusInternalServerError, "Some error")
	}
	c.JSON(http.StatusOK, "Deleted")
}
